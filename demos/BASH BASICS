# a basic basic bash file that shows some syntax & cmds

: <<'END'
this is a block comment
END


# declaring a variable & basic references 
var=42
echo "this is var: ${var}"
echo "this also: $var"
echo ""

# different ways to evaluate xprs
var2=5
echo "addding stuff: ${var} + ${var2}"		# doesn't work, need to tell it to eval xprs 
echo "this will add: $(($var + $var2))"		# $((...)) evaluates an arithmetic xprs 
echo ""
# subtleties of string quotes
echo "this is $var (double quotes)"
echo 'this is var (single quotes)'
echo 'All sorts of things are ignored in single quotes, like $ & * ; |.' 
echo ""
# shell exec - 2 equivalent notations
echo "Listing home - using \$( ls ~ ):  $(ls ~)"
echo "Listing home - using \` ls ~ \`:  `ls ~`"
echo ""
# declaring a function & using it
add_stuff() {
	echo "the sum is: $(($1 + $2))"
}
add_stuff 66 99
# returning a value from a function
function add_stuff_return(){
	__ans=$(($1+$2))
	echo "done with \$__ans=$__ans"
}
# this prints nothing for $ans because the function evaluated as a global within the ${} context
echo "add_stuff_return: $(add_stuff_return 3 4)"
echo "__ans: $__ans"
# here since we evalute in the current context, $ans remains as an accessible global value
add_stuff_return 6 5
echo "__ans: $__ans"
echo ""
# conditionals
: <<'END'
 [[ is actually a program call. IT CAN ONLY RETURN 0 (true) 1 (false). a few notes:
	* any program that also returns 0,1 grep, ping, etc.
	* a few convenient options can be passed, 
END

var="foo"
if [[ $var == "foo" ]]; then
	echo "$var is foo"
elif [[ -n "$var" ]]; then
	echo "$var is not empty"
else
	echo "$var is empty"
fi
echo ""
# conditionals - evaluate numeric expr.
if (( 40 + 2 == 42 )); then
	echo "we have 42!"
else
	echo "we don't have 42.."
fi
echo "" 
# brace expensions
echo "{a,b,c}42:"
echo {a,b,c}42
#useful in for loops:
for i in {1..5}; do
	echo "this is loop $i"
done
for i in {1..50..10}; do
	echo "this is loop $i by stepsize 10"
done
# iterate on a directory
for file in ~/Downloads/*; do
	echo $file
done



